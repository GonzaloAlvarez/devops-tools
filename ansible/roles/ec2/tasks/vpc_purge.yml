---
- name: Gather AWS subnet facts
  ec2_vpc_subnet_facts:
    region: "{{ aws_region }}"
    filters:
      { "tag:app": "{{ project }}-subnet" }
  register: aws_vpc_subnet_facts
- name: Remove all subnets registered
  ec2_vpc_subnet:
    state: absent
    cidr: "{{ subnet_item['cidr_block'] }}"
    vpc_id: "{{ subnet_item['vpc_id'] }}"
    region: "{{ aws_region }}"
  with_items: "{{ aws_vpc_subnet_facts.subnets }}"
  when: aws_vpc_subnet_facts.subnets|length > 0
  loop_control:
    loop_var: subnet_item
# We now remove the Routing table, as the subnet
# was a dependency and it would fail if we try
# to remove it earlier
- name: Gather facts about the VPC
  ec2_vpc_net_facts:
    region: "{{ aws_region }}"
    filters: { "tag:Name":"{{ aws_vpc_name }}" }
  register: aws_vpc_facts
- name: Remove VPC Routing table
  ec2_vpc_route_table:
    state: absent
    region: "{{ aws_region }}"
    vpc_id: "{{ vpc_item.id }}"
    tags: { "Name":"{{ project }}-vpc-public-rtable" }
  with_items: "{{ aws_vpc_facts.vpcs }}"
  when: aws_vpc_facts.vpcs|length > 0
  loop_control:
    loop_var: vpc_item
# And we finalize by removing the VPC altogether
- name: Remove VPC in AWS
  ec2_vpc_net:
    state: absent
    region: "{{ aws_region }}"
    name: "{{ aws_vpc_name }}"
    cidr_block: "{{ aws_vpc_cidr_block }}"
    tenancy: default
  register: aws_vpc_content
