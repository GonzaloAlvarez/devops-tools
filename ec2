#!/bin/bash
BASE_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $BASE_PATH/bootstrap.sh

SSH_REMOTE_PORT=443
SSH=$(which ssh)
SCP=$(which scp)
RSYNC=$(which rsync)

function get_instance_details() {
    QUERY_PARAM="Reservations[].Instances[].[PublicDnsName,Tags[?Key=='Name'].Value[],InstanceType,PublicIpAddress]"
    FILTER_PARAM="Name=instance-state-name,Values=running"
    PYTHON_SCRIPT="import sys, json; j=json.load(sys.stdin); l="\n".join([sys.argv[1].format(x[0],x[1][0],x[2],x[3]) for x in j]); print l"
    INSTANCES_DETAILS=$($ENV_PATH/bin/aws ec2 describe-instances --query $QUERY_PARAM --filters $FILTER_PARAM)
    echo $INSTANCES_DETAILS | $ENV_PATH/bin/python -c 'import sys, json; j=json.load(sys.stdin); l="\n".join([sys.argv[1].format(i+1,x[0],x[1][0],x[2],x[3]) for i,x in enumerate(j)]); print l' "{} {} {} {} {}"
}

function connect_instance() {
    if [ -z "$INSTANCES_PLAIN_DETAILS" ]; then
        echo "No instances. Exiting."
        exit 0
    fi
    # ./awscli ec2 authorize-security-group-ingress --group-id "sg-3e355f46" --protocol tcp --port 22 --cidr 67.185.162.138/2
    LINE=1
    if [ 0$1 -gt 0 ]; then
        LINE=$1
    fi
    EC2_DNS_NAME="$(echo "$INSTANCES_PLAIN_DETAILS" | head -n $LINE | tail -n 1 | cut -d ' ' -f 2)"
    echo "Connecting to [$EC2_DNS_NAME]"
    $SSH -o StrictHostKeyChecking=no $EC2_DNS_NAME  -p $SSH_REMOTE_PORT
    return $?
}

function list_instances() {
    if [ "$1" == "-s" ]; then
        while read line; do
            echo $line | cut -d ' ' -f 2- | column -s' ' -t
            INSTANCE_DNS="$(echo $line | cut -d ' ' -f 2)"
            UPTIME_BOX=$($SSH -n -o StrictHostKeyChecking=no $INSTANCE_DNS -p 443 -q 'uptime' 2>/dev/null)
            FREEMEM_BOX=$($SSH -n -o StrictHostKeyChecking=no $INSTANCE_DNS -p 443 -q "free -t -m | grep Mem | awk '{print int((\$3 - \$7) / \$2 * 100)}'" 2>/dev/null)
            echo " $UPTIME_BOX | Mem: $FREEMEM_BOX%"
        done <<< "$INSTANCES_PLAIN_DETAILS"
    else
        echo "$INSTANCES_PLAIN_DETAILS" | column -s' ' -t
    fi
}

function sync_folder_instance() {
    if [ -z "$INSTANCES_PLAIN_DETAILS" ]; then
        echo "No instances. Exiting."
        exit 0
    fi
    # ./awscli ec2 authorize-security-group-ingress --group-id "sg-3e355f46" --protocol tcp --port 22 --cidr 67.185.162.138/2
    LINE=1
    if [ 0$1 -gt 0 ]; then
        LINE=$1
        shift
    fi
    EC2_DNS_NAME="$(echo "$INSTANCES_PLAIN_DETAILS" | head -n $LINE | tail -n 1 | cut -d ' ' -f 2)"

    REMOTE_PATH=$($SSH -o StrictHostKeyChecking=no $EC2_DNS_NAME -p $SSH_REMOTE_PORT pwd)

    $RSYNC -rutve "ssh -o StrictHostKeyChecking=no -p $SSH_REMOTE_PORT" --exclude ".*/" $BASE_PATH $EC2_DNS_NAME:$REMOTE_PATH --delete

    if [ "$1" == "both" ];then
        $RSYNC -rutve "ssh -o StrictHostKeyChecking=no -p $SSH_REMOTE_PORT" --exclude ".*/" $EC2_DNS_NAME:$REMOTE_PATH/$(basename $BASE_PATH) $BASE_PATH/..
    fi
}

function copy_instance() {
    LINE=1
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
        LINE=$1
        shift
        if [ -r "$1" ]; then
            FILE="$1"
            shift
        fi
    elif [ -r "$1" ]; then
        FILE="$1"
        shift
    fi
    EC2_DNS_NAME="$(echo "$INSTANCES_PLAIN_DETAILS" | head -n $LINE | tail -n 1 | cut -d ' ' -f 2)"
    echo "Copying [$FILE] to [$EC2_DNS_NAME]"
    $SCP -o StrictHostKeyChecking=no -P $SSH_REMOTE_PORT "$FILE" $EC2_DNS_NAME:/tmp $@
}

function tunnel_instance() {
   if [ -z "$INSTANCES_PLAIN_DETAILS" ]; then
        echo "No instances. Exiting."
        exit 0
    fi
    LINE=1
    if [ 0$1 -gt 0 ]; then
        LINE=$1
        shift
    fi
    EC2_DNS_NAME="$(echo "$INSTANCES_PLAIN_DETAILS" | head -n $LINE | tail -n 1 | cut -d ' ' -f 2)"

    REMOTE_PORT="80"
    if [ -n "$1" -a "${1:-0}" -gt 0 ]; then
        REMOTE_PORT="$1"
        shift
    fi
    LOCAL_PORT="8090"
    if [ -n "$1" -a "${1:-0}" -gt 0 ]; then
        LOCAL_PORT="$1"
        shift
    fi
    LSOF="$(which lsof)"
    if $LSOF -Pi :$LOCAL_PORT -sTCP:LISTEN -t >/dev/null ; then
        echo "Port $LOCAL_PORT is in use"
        exit 1
    fi

    echo "Trying to open 127.0.0.1:$LOCAL_PORT [http://127.0.0.1:$LOCAL_PORT] connected to $EC2_DNS_NAME:$REMOTE_PORT"
    echo "Use Crtl-C to end"

    $SSH -N -L $LOCAL_PORT:127.0.0.1:$REMOTE_PORT -p $SSH_REMOTE_PORT -o StrictHostKeyChecking=no $EC2_DNS_NAME
    return $?
}

load_configuration
INSTANCES_PLAIN_DETAILS="$(get_instance_details)"

[[ "$1" == "connect" ]] && shift && connect_instance $@ && exit $?
[[ "$1" == "list" ]] && shift && list_instances $@ && exit $?
[[ "$1" == "sync" ]] && shift && sync_folder_instance $@ && exit $?
[[ "$1" == "copy" ]] && shift && copy_instance $@ && exit $?
[[ "$1" == "tunnel" ]] && shift && tunnel_instance $@ && exit $?
list_instances
